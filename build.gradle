plugins {
  id "io.freefair.lombok" version "6.4.3"
  id 'com.github.jk1.dependency-license-report' version '2.1'
  id "org.kordamp.gradle.markdown" version "2.2.0"
}

group 'com.fortify.ssc.parser.cyclonedx'
ext.getVersion = {
	def result = project.findProperty('version');
	return !result || result=='unspecified' ? new Date().format('0.yyyyMMdd.HHmmss') : result;
}
version = ext.getVersion();
ext.sscParserPluginVersion = project.version

ext {
	gradleHelpersLocation = "https://raw.githubusercontent.com/fortify-ps/gradle-helpers/1.7"
	debrickedBaseName = "fortify-ssc-parser-debricked"
}

apply from: "${gradleHelpersLocation}/repo-helper.gradle"
apply from: "${gradleHelpersLocation}/junit-helper.gradle"
apply from: "${gradleHelpersLocation}/ssc-parser-plugin-helper.gradle"
apply from: "${gradleHelpersLocation}/thirdparty-helper.gradle"
apply from: "${gradleHelpersLocation}/readme2html.gradle"

apply plugin: 'java'
sourceCompatibility = 1.8

sourceSets {
    test {
        resources {
            srcDir "sampleData"
        }
    }
}

configurations.all {
    // Don't cache modules that may change (i.e. snapshots)
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
	implementationExport(group: 'org.mapdb', name: 'mapdb', version: '3.0.8') { transitive = true }
    implementationExport(group: 'com.fortify.ssc.parser.util', name: 'fortify-ssc-parser-util-json', version:'1.6.1.RELEASE', changing: false) { transitive = true }
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.8.2")
}

jar {
	exclude 'plugin-debricked.xml'
	exclude 'images/debricked-*.png'
	baseName = "${rootProject.name}"
}

task debrickedJar(type: Jar) {
    from sourceSets.main.output
    // replace version placeholders in plugin.xml
    filesMatching('plugin-debricked.xml') {
        filter {
            it.replaceAll('<!--VERSION-->.*?<!--/VERSION-->', sscParserPluginVersion)
        }
    }
    from {
		configurations.implementationExport.collect { 
    		it.isDirectory() ? it : zipTree(it).matching { 
    			exclude 'META-INF/*' 
    			exclude 'module-info.class' // Avoid duplicate entries from recent Jackson libraries 
    		} 
    	} 
    }
    duplicatesStrategy = 'exclude'
    exclude 'plugin.xml'
    exclude 'images/cyclonedx-*.png'
	rename("plugin-debricked.xml", "plugin.xml")
    baseName = "${debrickedBaseName}"
}

assemble.dependsOn(debrickedJar)

task distCycloneDX(type: Zip) {
	dependsOn 'build', 'readme2html'
	archiveFileName = "${rootProject.name}-${project.version}.zip"
	destinationDirectory = file("$buildDir/dist")
	from("${buildDir}/${libsDirName}") {
		include "${rootProject.name}-${project.version}.jar"
	}
	from "${buildDir}/html"
	from("${projectDir}") {
		include "sampleData/**/*"
		exclude "sampleData/**/*debricked*"
		include "LICENSE.TXT"
	}
}

task distDebricked(type: Zip) {
	dependsOn 'build', 'readme2html'
	archiveFileName = "${debrickedBaseName}-${project.version}.zip"
	destinationDirectory = file("$buildDir/dist")
	from("${buildDir}/${libsDirName}") {
		include "${debrickedBaseName}-${project.version}.jar"
	}
	from "${buildDir}/html"
	from("${projectDir}") {
		include "sampleData/**/*debricked*"
		include "LICENSE.TXT"
	}
}

task dist {
	dependsOn 'distCycloneDX', 'distDebricked'
}